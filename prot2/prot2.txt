from tkinter import *
import tkinter.font as font
import os
import time
import string
import sqlite3


class User: # main class object for a user once they log in
    def __init__(self,userID,username,password):
        self.ID = userID
        self.username = username
        self.password = password
        if(self.auth()): pass # checks password against saved password to gain access while keeping all the variables inside the users class
        else: del(self)
        
    def auth(self):
        print(f"{self.ID}|{self.username} Not Authorised")
        return False
        


# can be used to both encrypt and decrypt 
def encrypt(key,message): # method to encrypt a message using caeser cipher
    # list of characters that can be encrypted
    lowerAlphabet = string.ascii_lowercase
    upperAlphabet = string.ascii_uppercase
    numeric = ['1','2','3','4','5','6','7','8','9']
    message_lenth = len(message)

    encrypted_message = ""
    
    #iteration through diffrent characters till the correct one is found to be encrypted
    for i in range(message_lenth):
        value = 0
        newindex = 0
        if message[i] in lowerAlphabet:
            value = lowerAlphabet.index(message[i])
            newindex = (value + key) % len(lowerAlphabet)
            encrypted_message = encrypted_message + lowerAlphabet[newindex]
        elif message[i] in upperAlphabet:
            value = upperAlphabet.index(message[i])
            newindex = (value + key) % len(upperAlphabet)
            encrypted_message = encrypted_message + upperAlphabet[newindex]
        elif message[i] in numeric:
            value = numeric.index(message[i])
            newindex = (value + key) % len(numeric)
            encrypted_message = encrypted_message + numeric[newindex]
        elif message[i] == ' ':
            encrypted_message = encrypted_message + ' '
        else: # if a value that cannot be encrypyed is entered raise an error
            raise TypeError(f"couldnt find character : {message[i]} in avaliable characters")
    return encrypted_message




# USER ACCOUNT SYSTEM

def main():

    # set up all files that need to exist if they dont - data file and database files
    directory = os.getcwd()
    if(directory.endswith("prot2")): pass # python counts execution as the script but VS code counts execution location as the parent file
    else: directory = directory + "\\prot2"

    dataPath = directory + "\\data"
    fileDataPath = dataPath + "\\files"
    filesPath = directory + "\\files"

    if(os.path.exists(dataPath) and os.path.isdir(dataPath)): pass
    else:
        os.makedirs(dataPath)
        print("MAIN : dataPath not found - creating dataPath directory")
    if(os.path.exists(fileDataPath) and os.path.isdir(fileDataPath)): pass
    else: 
        os.makedirs(fileDataPath)
        print("MAIN : fileDataPath not found - creating new fileDataPath directory")
    if(os.path.exists(filesPath) and os.path.isdir(filesPath)): pass
    else: 
        os.makedirs(filesPath)
        print("MAIN : filesPath not found - creating new filesPath directory")

    dbCon = sqlite3.connect(dataPath)
    cursor = dbCon.cursor()

    if(os.path.exists(dataPath+"\\userDB")): pass
    else: 
        cursor.execute("CREATE TABLE userDB(ID INTEGER PRIMARY KEY, USERNAME TEXT, PASSWORD INTEGER, ADMIN BOOL, DATECREATED TEXT)")
    if(os.path.exists(dataPath+"\\fileDB")): pass
    else:
        cursor.execute("CREATE TABLE fileDB(ID INTEGER PRIMARY KEY, FILENAME TEXT, AUTHOR TEXT, DATECREATED TEXT, LASTMODIFIED TEXT)")

    dbCon.close()



    frameColour = "lightgrey"
    entryColour = "white"
    labelColour = 'lightgrey'
    buttonColour = 'white'

    root = Tk()
    root.title("LOGIN")
    root.geometry("300x200")
    root.maxsize(height=200,width=300)
    emptyMenu = Menu(root)
    root.config(menu=emptyMenu)

    backFrame = Frame(root,height=200,width=300,background=frameColour)

    usernameEntry = Entry(root,background=entryColour)
    passwordEntry = Entry(root,show='*',background=entryColour)

    usernameLabel = Label(root,text="Username",height=1,background=labelColour)
    passwordLabel = Label(root,text="Password",height=1,background=labelColour)        

    submitButton = Button(root,text="Submit",height=1,width=10,background=buttonColour)#,command=auth)

    backFrame.pack()

    usernameEntry.place(x=10,y=50)
    passwordEntry.place(x=10,y=90)

    usernameLabel.place(x=10,y=29)
    passwordLabel.place(x=10,y=69)

    submitButton.place(x=150,y=90)   

    root.mainloop()


if __name__ == "__main__":
    testUser = User(1,'user',1234)
    main()